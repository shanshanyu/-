#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>

void sys_err(const char *s){
  perror(s);
  exit(1);
}

int main(int argc,char *argv[]){
  if(argc!=4)  sys_err("need 4 args");
  int n=atoi(argv[1]);

  struct stat st;  //get file size
  int ret=stat(argv[2],&st);
  if(ret==-1) sys_err("stat err");
  int len=st.st_size/n;

  char *p=(char *)malloc(2*len);
  if(!p) sys_err("malloc err");

  int fd_from,fd_to; //open file
  fd_from=open(argv[2],O_RDONLY);
  if(fd_from==-1) sys_err("open err");
  fd_to=open(argv[3],O_RDWR|O_CREAT,0664);
  if(fd_to==-1) sys_err("open err");
 
 pid_t pid; //create child progress
  int i;
  for(i=0;i<n;i++){
    pid=fork();
    if(pid<0){
      perror("fork error");
      exit(1);
}else if(pid==0) break;  
}

  if(i<n-1){ //copy file
  lseek(fd_from,i*len,SEEK_SET);
  lseek(fd_to,i*len,SEEK_SET);
  read(fd_from,p,len);
  write(fd_to,p,len);
}else if(i==n-1){
  lseek(fd_from,i*len,SEEK_SET);
  lseek(fd_to,i*len,SEEK_SET);
  ret=read(fd_from,p,2*len);
  write(fd_to,p,ret);
}
  return 0;
}
